// Reset
html {
  box-sizing: border-box;
}

* {
  &,
  &::before,
  &::after {
    box-sizing: inherit;
  }
}

html,
body {
  @include font-size(5);

  color: color('night');
  font-family: $font-family-sans-serif;
  font-size: $font-size-base;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-weight: font-weight('regular');
  margin: spacing('none');
  text-rendering: optimizeLegibility;
  text-size-adjust: 100%;
}

code,
pre {
  background-color: lighten(color('night'), 10%);
  border-radius: border-radius('small');
  color: color('grey', 'lighter');
  font-family: $font-family-monospaced;
}

code {
  padding: spacing('quarter') spacing('half');
}

pre {
  padding: spacing('half') spacing();

  code {
    padding: 0;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: spacing('none');
  padding: spacing('none');
}

a {
  color: color('blue', 'light');
  text-decoration: none;

  &:active {
    color: color('green');
  }

  &:visited {
    color: color('magenta', 'dark');
  }
}

p {
  margin: spacing('none');

  &:not(:last-child) {
    margin-bottom: spacing();
  }
}

ul {
  li {
    line-height: spacing('double');
  }
}

img,
embed,
iframe,
object,
audio,
video {
  height: auto;
  max-width: 100%;
}

iframe {
  border: 0;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: spacing('half');
  text-align: left;
}

button,
input,
optgroup,
select,
textarea {
  border: none;
  font-family: inherit;
  font-size: inherit;
  font-weight: font-weight('regular');
  line-height: inherit;
}

address {
  font-style: normal;
}

// styles
ul.no-bullets {
  list-style: none;
  padding: spacing('none');
}

.caption {
  @include font-size(6);

  color: color('night', 'lighter');
  font-weight: font-weight('regular');
}

.uppercase {
  text-transform: uppercase;
}

.text {
  &--italic {
    font-style: italic;
  }

  @each $weight in map-keys($font-weight-data) {
    &--weight-#{$weight} {
      font-weight: font-weight($weight);
    }
  }

  @each $color-name in $text-colors {
    &--color-#{$color-name} {
      color: color($color-name);

      @each $hue-name in map-keys(map-remove(map-get($color-palette-data, $color-name), 'base')) {
        &-#{$hue-name} {
          color: color($color-name, $hue-name);
        }
      }
    }
  }

  @each $alignment in $text-alignments {
    &--align-#{$alignment} {
      text-align: $alignment;
    }
  }

  @for $size from 1 through length($sizes) {
    &--size-#{$size} {
      @include font-size($size);
    }
  }
}
