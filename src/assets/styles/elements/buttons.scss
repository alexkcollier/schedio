@mixin button-shadow {
  box-shadow: shadow();

  &:not(:disabled):hover {
    box-shadow: shadow('heavy');
  }
}

@mixin button-disabled {
  &:disabled,
  &:disabled:hover {
    @include control-disabled;
  }
}

@mixin button-focused {
  &:focus {
    @include control-focused;
  }
}

@mixin button-base {
  @include button-disabled;
  @include button-focused;

  align-items: center;
  background-color: transparent;
  border: border();
  border-color: transparent;
  border-radius: border-radius('small');
  color: color('spartan_blue', 'light');
  display: inline-flex;
  padding: spacing('half') spacing();
  transition: all duration() easing(), outline 0s, outline-offset 0s, height 0s, width 0s;

  &:hover {
    color: color('spartan_blue', 'dark');
  }
}

@mixin button-color($button-color, $button-shade: 'base') {
  $white-or-ice: ($button-color == 'white') or ($button-color == 'ice');
  $base-color: color($button-color, $button-shade);
  $text-color: choose-contrast-color($button-color, $button-shade);

  @include button-shadow;
  @include button-disabled;

  background-color: $base-color;
  border-color: darken($base-color, 20%);
  color: $text-color;

  .spinner {
    stroke: if($white-or-ice, color('grey'), color('white'));
  }

  &,
  &:hover {
    border-color: transparent;
    color: $text-color;
  }

  &:active {
    $active-color: if($white-or-ice, darken($base-color, 10%), color($button-color, 'dark'));

    background-color: $active-color;
    box-shadow: shadow('heavy') !important;
  }

  &:disabled {
    svg {
      filter: none;
    }

    .spinner {
      stroke: color('grey');
    }
  }

  &:not(:active):hover {
    $hover-color: if($white-or-ice, darken($base-color, 5%), color($button-color, 'light'));

    background-color: $hover-color;
  }
}

@mixin button-text($button-color, $button-shade: 'base') {
  $white-or-ice: ($button-color == 'white') or ($button-color == 'ice');

  @include button-disabled;

  color: color($button-color, $button-shade);

  .spinner {
    stroke: color($button-color, $button-shade);
  }

  &:hover {
    background-color: if(
      $white-or-ice,
      rgba(darken(color($button-color), 3%), 0.2),
      rgba(color($button-color, 'lighter'), 0.2)
    );
    color: color($button-color);
  }

  &:active {
    background-color: if(
      $white-or-ice,
      rgba(darken(color($button-color), 3%), 0.3),
      rgba(color($button-color, 'lighter'), 0.3)
    );
  }

  &:not(:disabled):hover {
    box-shadow: shadow('light');
  }
}

@mixin button-outline($button-color, $button-shade: 'base') {
  @include button-text($button-color, $button-shade);
  @include button-disabled;

  border: border();
  border-color: color($button-color, $button-shade);
  color: color($button-color, $button-shade);
}

@mixin button-size-small {
  @include font-size(6);
}

@mixin button-size-regular {
  @include font-size(5);
}

@mixin button-size-large {
  @include font-size(4);
}
