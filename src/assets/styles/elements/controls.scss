@mixin control-border-shadow {
  box-shadow: 0 0 0 2px color('spartan_blue', 'light'), shadow();
  border-color: transparent;
  outline: none;
}

@mixin control-disabled {
  background-color: color('grey', 'light');
  border: border();
  border-color: color('grey') !important;
  box-shadow: none !important;
  color: color('night', 'lighter');
  cursor: not-allowed;
}

@mixin control-invalid {
  border-color: transparent;
  box-shadow: 0 0 0 2px color('red'), shadow() !important;
}

@mixin control {
  background-color: color('white');
  border: border();
  border-radius: border-radius('small');
  display: inline-block;
  flex: 1 1 0;
  margin-top: spacing('half');
  padding: spacing('half') spacing();
  text-transform: none;
  transition: all duration() easing();
  width: 100%;

  &::placeholder {
    color: color('night', 'lighter');
  }

  &:disabled {
    @include control-disabled;
  }

  &:focus:not(:disabled) {
    @include control-border-shadow;
  }

  // stylelint-disable no-descending-specificity
  &:hover,
  &:active,
  &:hover:active {
    &:not(:disabled) {
      @include control-border-shadow;
    }
  }
  // stylelint-enable

  // only apply invalid styling to fields that have been touched
  &--invalid {
    @include control-invalid;
  }
}

@mixin control-with-icons {
  $root-class: &;
  display: block;
  position: relative;

  &__container {
    flex: 1 1 0;
    position: relative;

    #{$root-class}__icon {
      position: absolute;
      top: spacing('half');

      &--left {
        left: spacing('half');
      }

      &--right {
        right: spacing('half');
      }
    }
  }

  &--has-icon-left {
    padding-left: spacing('double') + spacing('half');
  }

  &--has-icon-right {
    padding-right: spacing('double') + spacing('half');
  }
}

@mixin control-inline-label {
  align-items: center;
  cursor: pointer;
  display: inline-flex;
  flex-direction: row-reverse;
  margin-top: 0 !important;

  &:not(:last-child) {
    margin-right: 1em;
  }
}

@mixin check-or-radio {
  opacity: 0;
  position: absolute;

  & ~ &__check {
    align-items: center;
    background-color: color('white');
    border: border();
    display: flex;
    height: 1em;
    justify-content: center;
    margin: spacing('half');
    transition: all duration() easing();
    width: 1em;

    @content;

    &--invalid {
      @include control-invalid;
    }
  }

  &:disabled ~ &__check {
    @include control-disabled;
  }

  &:not(:disabled) ~ &__check:hover {
    @include control-border-shadow;
  }

  &:active:not(:disabled) ~ &__check {
    @include control-border-shadow;
  }

  &:focus:not(:disabled) ~ &__check {
    @include control-border-shadow;
  }

  &:checked:not(:focus):not(:disabled) ~ &__check {
    border-color: transparent;
    box-shadow: 0 0 0 1px color('spartan_blue', 'light'), shadow();
  }

  &:disabled:checked ~ &__check::after {
    // force checked radios and checkboxes to grey
    background-color: color('grey', 'dark');
    border-color: color('grey', 'dark');
  }
}

@mixin switch-size($switch-size: 'base') {
  $toggle-size: 1.5em;

  @if $switch-size == 'base' {
    $toggle-size: 1.5em;
  } @else if $switch-size == 'medium' {
    $toggle-size: 2em;
  } @else if $switch-size == 'large' {
    $toggle-size: 3em;
  }

  border-radius: $toggle-size;
  height: $toggle-size;
  min-width: 2 * $toggle-size;
  width: 2 * $toggle-size;

  &::after {
    height: $toggle-size;
    width: $toggle-size;
  }
}

@mixin switch {
  @include check-or-radio;
  // save the parent to make nesting easier
  $parent: &;

  & ~ &__check {
    @include switch-size;
    // override border and shadow
    border: border() !important;
    box-shadow: shadow() !important;
    justify-content: flex-start;
    // the switch knob
    &::after {
      background: color('white');
      border: border();
      border-radius: border-radius('circle');
      content: '';
      left: -1px;
      position: relative;
      transition: all duration('slow') easing();
    }
  }

  & ~ &__check--invalid {
    border-color: transparent !important;
    box-shadow: 0 0 0 2px color('red'), shadow() !important;
  }

  // use default browser focus styling
  &:focus ~ &__check {
    outline-color: rgb(77, 144, 254) !important;
    outline-offset: -2px !important;
    outline-style: auto !important;
    outline-width: 5px !important;
  }

  // disabled switch knob
  &:disabled ~ &__check::after {
    background-color: color('grey');
    border: border() !important;
  }

  // pointer on hover
  &:not(:disabled) ~ &__check {
    cursor: pointer;
  }

  // slide the switch and change background
  &:checked {
    ~ #{$parent}__check::after {
      transform: translateX(calc(100%));
    }

    &:not(:disabled) ~ #{$parent}__check {
      background-color: color('green');
    }

    &:not(:disabled):hover ~ #{$parent}__check {
      background-color: color('green', 'dark');
    }
  }

  &:not(:disabled):hover ~ #{$parent}__check {
    background-color: color('grey', 'lighter');
  }

  // slide the switch a little on hover
  &:hover:not(:focus):not(:disabled) {
    // unchecked comes from left
    &:not(:checked) ~ #{$parent}__check::after {
      transform: translateX(spacing('half'));
    }
    // checked comes from right
    &:checked ~ #{$parent}__check::after {
      transform: translateX(spacing());
    }
  }
}
